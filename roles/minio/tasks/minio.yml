# minio install
---
- name: create minio directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
    state: directory
  with_items:
    - "{{ containers_path }}/{{ app_user }}"
    - "{{ containers_path }}/{{ app_user }}/data"
    - "{{ containers_path }}/{{ app_user }}/config"

- name: stop container if exists
  become_user: "{{ app_user }}"
  ansible.builtin.systemd:
    name: "container-{{ app_name }}"
    enabled: true
    state: stopped
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ app_uid }}"
  register: app_stop_result
  failed_when: "app_stop_result is failed and 'Could not find the requested service container-' not in app_stop_result.msg"

- name: create minio container
  become_user: "{{ app_user }}"
  containers.podman.podman_container:
    recreate: false
    name: "{{ app_name }}"
    hostname: "{{ hostname }}"
    image: quay.io/minio/minio:RELEASE.2025-02-28T09-55-16Z
    command: server /data --console-address 127.0.0.1:9001
    cpus: "{{ cpu_core_limit }}"
    memory: "{{ memory_limit }}"
    ports:
      - "{{ api_port }}:9000/tcp"
      - "{{ app_port }}:9001/tcp"
    volumes:
      - "{{ containers_path }}/{{ app_user }}/data:/data"
    env:
      MINIO_ROOT_USER: "{{ minio_username }}"
      MINIO_ROOT_PASSWORD: " {{ minio_password }}"
    generate_systemd: {"path": "/home/{{ app_user }}/.config/systemd/user"}
    state: present

- name: enable and start
  become_user: "{{ app_user }}"
  ansible.builtin.systemd:
    daemon-reload: true
    name: "container-{{ app_name }}"
    enabled: true
    state: started
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ app_uid }}"
