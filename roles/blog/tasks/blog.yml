# blog install
---
- name: create container volume directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
    state: directory
  with_items:
    - "{{ containers_path }}/{{ app_name }}/app"
    - "{{ containers_path }}/{{ app_name }}/instance"
    - "{{ containers_path }}/{{ app_name }}/custom"

- name: unarchive custom files if available
  ansible.builtin.unarchive:
    src: "{{ file_server }}/blog.zip"
    dest: "{{ containers_path }}/{{ app_name }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: u=rwX,g=rX,o=rX
    remote_src: true
  ignore_errors: true

- name: pull blog container
  become_user: "{{ app_user }}"
  containers.podman.podman_container:
    recreate: true
    force_restart: true
    name: "{{ app_name }}"
    hostname: "{{ hostname }}"
    image: ghcr.io/ianhaddock/blog:latest
    ports:
      - "{{ app_port }}:5000/tcp"
    volumes:
      - "{{ containers_path }}/{{ app_name }}/custom:\
         /blog/app/static/custom:ro,Z"
      - "{{ containers_path }}/{{ app_name }}/instance:\
         /blog/instance:Z"

    generate_systemd: {"path": "/home/{{ app_user }}/.config/systemd/user"}
    state: present
  register: container_state

- name: prune old images
  become_user: "{{ app_user }}"
  ansible.builtin.command:
    cmd: 'podman image prune -f -a'
  when: container_state.changed
  register: prune_debug

- name: debug
  ansible.builtin.debug:
    msg: "{{ prune_debug }}"
  when: verbose

- name: enable and start
  become_user: "{{ app_user }}"
  ansible.builtin.systemd:
    daemon-reload: true
    no_block: true
    name: "container-{{ app_name }}"
    enabled: true
    state: started
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ app_uid }}"
  when: container_state.changed
  register: files_systemctl_debug
